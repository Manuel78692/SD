// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SERVIDOR.Data;

#nullable disable

namespace SERVIDOR.Migrations
{
    [DbContext(typeof(SensorDataContext))]
    [Migration("20250611165530_InitialCreateSeparateTables")]
    partial class InitialCreateSeparateTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("SERVIDOR.Models.SensorReading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("SensorType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("WavyId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Timestamp")
                        .HasDatabaseName("IX_SensorReading_Timestamp");

                    b.HasIndex("WavyId")
                        .HasDatabaseName("IX_SensorReading_WavyId");

                    b.HasIndex("WavyId", "Timestamp")
                        .HasDatabaseName("IX_SensorReading_WavyId_Timestamp");

                    b.ToTable("SensorReading");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("SERVIDOR.Models.GpsReading", b =>
                {
                    b.HasBaseType("SERVIDOR.Models.SensorReading");

                    b.Property<double?>("Altitude")
                        .HasPrecision(8, 2)
                        .HasColumnType("REAL");

                    b.Property<double>("Latitude")
                        .HasPrecision(10, 7)
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasPrecision(10, 7)
                        .HasColumnType("REAL");

                    b.HasIndex("Latitude", "Longitude")
                        .HasDatabaseName("IX_GpsReading_Location");

                    b.ToTable("GpsReadings", (string)null);
                });

            modelBuilder.Entity("SERVIDOR.Models.GyroReading", b =>
                {
                    b.HasBaseType("SERVIDOR.Models.SensorReading");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<double>("X")
                        .HasPrecision(8, 4)
                        .HasColumnType("REAL");

                    b.Property<double>("Y")
                        .HasPrecision(8, 4)
                        .HasColumnType("REAL");

                    b.Property<double>("Z")
                        .HasPrecision(8, 4)
                        .HasColumnType("REAL");

                    b.ToTable("GyroReadings", (string)null);
                });

            modelBuilder.Entity("SERVIDOR.Models.HumidityReading", b =>
                {
                    b.HasBaseType("SERVIDOR.Models.SensorReading");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<double>("Value")
                        .HasPrecision(5, 2)
                        .HasColumnType("REAL");

                    b.HasIndex("Value")
                        .HasDatabaseName("IX_HumidityReading_Value");

                    b.ToTable("HumidityReadings", (string)null);
                });

            modelBuilder.Entity("SERVIDOR.Models.PhReading", b =>
                {
                    b.HasBaseType("SERVIDOR.Models.SensorReading");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<double>("Value")
                        .HasPrecision(4, 2)
                        .HasColumnType("REAL");

                    b.HasIndex("Value")
                        .HasDatabaseName("IX_PhReading_Value");

                    b.ToTable("PhReadings", (string)null);
                });

            modelBuilder.Entity("SERVIDOR.Models.TemperatureReading", b =>
                {
                    b.HasBaseType("SERVIDOR.Models.SensorReading");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<double>("Value")
                        .HasPrecision(5, 2)
                        .HasColumnType("REAL");

                    b.HasIndex("Value")
                        .HasDatabaseName("IX_TemperatureReading_Value");

                    b.ToTable("TemperatureReadings", (string)null);
                });

            modelBuilder.Entity("SERVIDOR.Models.GpsReading", b =>
                {
                    b.HasOne("SERVIDOR.Models.SensorReading", null)
                        .WithOne()
                        .HasForeignKey("SERVIDOR.Models.GpsReading", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SERVIDOR.Models.GyroReading", b =>
                {
                    b.HasOne("SERVIDOR.Models.SensorReading", null)
                        .WithOne()
                        .HasForeignKey("SERVIDOR.Models.GyroReading", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SERVIDOR.Models.HumidityReading", b =>
                {
                    b.HasOne("SERVIDOR.Models.SensorReading", null)
                        .WithOne()
                        .HasForeignKey("SERVIDOR.Models.HumidityReading", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SERVIDOR.Models.PhReading", b =>
                {
                    b.HasOne("SERVIDOR.Models.SensorReading", null)
                        .WithOne()
                        .HasForeignKey("SERVIDOR.Models.PhReading", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SERVIDOR.Models.TemperatureReading", b =>
                {
                    b.HasOne("SERVIDOR.Models.SensorReading", null)
                        .WithOne()
                        .HasForeignKey("SERVIDOR.Models.TemperatureReading", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
