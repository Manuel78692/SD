using System;
using System.IO;
using System.Globalization;
using System.Collections.Generic;

class WaveSwellByRandomCitySimulator
{
    static Random random = new Random();
    
    // Dicionário que mapeia as regiões aos seus grupos de cidades
    static Dictionary<string, List<string>> regionCities = new Dictionary<string, List<string>>
    {
        { "Norte", new List<string> { "Viana do Castelo", "Braga", "Porto" } },
        { "Centro", new List<string> { "Aveiro", "Coimbra", "Leiria" } },
        { "Lisboa", new List<string> { "Lisboa", "Setúbal Norte" } },
        { "Alentejo", new List<string> { "Setúbal Sul", "Beja" } },
        { "Algarve", new List<string> { "Faro" } }
    };

    // --- Função que define os limites de ondulação (em metros) conforme a estação do ano ---
    // Estes valores são exemplares:
    // Verão: ondas mais calmas; Inverno: ondas mais agitadas; Primavera e Outono: intermediários.
    static void GetSeasonSwellLimits(DateTime dt, out double minSwell, out double maxSwell)
    {
        int month = dt.Month;
        if (month >= 6 && month <= 8)             // Verão
        {
            minSwell = 0.5;
            maxSwell = 1.5;
        }
        else if (month == 12 || month == 1 || month == 2)  // Inverno
        {
            minSwell = 2.5;
            maxSwell = 4.0;
        }
        else if (month >= 3 && month <= 5)         // Primavera
        {
            minSwell = 1.0;
            maxSwell = 2.5;
        }
        else                                      // Outono
        {
            minSwell = 1.5;
            maxSwell = 3.0;
        }
    }
    
    // Calcula a ondulação de forma suave para um instante dado,
    // aplicando uma modulação diária (função senoidal) e adicionando um leve ruído.
    static double SmoothRandomSwell(DateTime dt)
    {
        GetSeasonSwellLimits(dt, out double minSwell, out double maxSwell);
        double hour = dt.Hour + dt.Minute / 60.0;
        double angle = ((hour / 24.0) * 2 * Math.PI) - Math.PI / 2;
        double sineValue = Math.Sin(angle);
        double amplitude = maxSwell - minSwell;
        double modulation = 0.1 * amplitude * sineValue;
        double baseSwell = ((minSwell + maxSwell) / 2.0) + modulation;
        double noise = (random.NextDouble() - 0.5) * 0.2 * amplitude;
        double swell = baseSwell + noise;
        return Math.Round(swell, 2);
    }
    
    // Classifica o estado da ondulação (swell) com base no valor (em metros)
    static string ClassifySwell(double swell)
    {
        if (swell < 1.0)
            return "Calmo";
        else if (swell < 2.0)
            return "Moderado";
        else if (swell < 3.0)
            return "Agitado";
        else
            return "Muito Agitado";
    }
    
    static void Main(string[] args)
    {
        // Primeiro, cria um dicionário que mapeia cada cidade à sua região.
        // Assim, para qualquer cidade escolhida, podemos identificar rapidamente sua região.
        Dictionary<string, string> cityToRegion = new Dictionary<string, string>();
        foreach (var kv in regionCities)
        {
            string region = kv.Key;
            foreach (string city in kv.Value)
            {
                cityToRegion[city] = region;
            }
        }
        
        // Cria uma lista de todas as cidades disponíveis (as chaves do dicionário cityToRegion)
        List<string> citiesList = new List<string>(cityToRegion.Keys);
        
        // Seleciona aleatoriamente uma cidade da lista
        string selectedCity = citiesList[random.Next(citiesList.Count)];
        // Obtém a região correspondente à cidade selecionada
        string region = cityToRegion[selectedCity];
        
        // Usa a data/hora atual para definir a estação e para simular a ondulação
        DateTime currentTime = DateTime.Now;
        double swell = SmoothRandomSwell(currentTime);
        string swellClassification = ClassifySwell(swell);
        
        // Opcional: grava o resultado num arquivo CSV
        string csvPath = "wave_swell_by_city.csv";
        using (StreamWriter sw = new StreamWriter(csvPath, true))
        {
            // Grava o cabeçalho se o arquivo estiver vazio
            if (new FileInfo(csvPath).Length == 0)
                sw.WriteLine("DataHora,Regiao,Cidade,Ondulação (m),Classificação");
            
            string line = $"{currentTime.ToString("yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture)},{region},{selectedCity},{swell} m,{swellClassification}";
            sw.WriteLine(line);
        }
        Console.WriteLine("Resultado gravado no CSV: " + csvPath);
    }
}
