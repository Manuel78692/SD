using System;
using System.IO;
using System.Globalization;
using System.Collections.Generic;

class PHSimulator
{
    static Random random = new Random();
    
    // Dicionário que mapeia as regiões aos seus grupos de cidades
    static Dictionary<string, List<string>> regionCities = new Dictionary<string, List<string>>
    {
        { "Norte", new List<string> { "Viana do Castelo", "Braga", "Porto" } },
        { "Centro", new List<string> { "Aveiro", "Coimbra", "Leiria" } },
        { "Lisboa", new List<string> { "Lisboa", "Setúbal Norte" } },
        { "Alentejo", new List<string> { "Setúbal Sul", "Beja" } },
        { "Algarve", new List<string> { "Faro" } }
    };

    // Retorna o ajuste (delta) de pH para cada região
    static double GetRegionPHAdjustment(string region)
    {
        switch (region)
        {
            case "Norte": return -0.03;
            case "Centro": return -0.02;
            case "Lisboa": return 0.00;
            case "Alentejo": return 0.05;
            case "Algarve": return 0.08;
            default: return 0.0;
        }
    }

    // Define os limites de pH para cada estação do ano com base em um intervalo base
    // e aplica o ajuste da região.
    static void GetSeasonPHLimits(DateTime dt, string region, out double minPH, out double maxPH)
    {
        double adjustment = GetRegionPHAdjustment(region);
        int month = dt.Month;
        if (month == 12 || month == 1 || month == 2) // Inverno
        {
            minPH = 8.15 + adjustment;
            maxPH = 8.25 + adjustment;
        }
        else if (month >= 3 && month <= 5) // Primavera
        {
            minPH = 8.05 + adjustment;
            maxPH = 8.15 + adjustment;
        }
        else if (month >= 6 && month <= 8) // Verão
        {
            minPH = 7.95 + adjustment;
            maxPH = 8.05 + adjustment;
        }
        else // Outono (Set, Out, Nov)
        {
            minPH = 8.05 + adjustment;
            maxPH = 8.15 + adjustment;
        }
    }

    // Calcula o pH de forma suave para um determinado instante e região.
    // Utiliza uma modulação diária (com amplitude pequena) e adiciona um leve ruído.
    static double SmoothRandomPH(DateTime dt, string region)
    {
        GetSeasonPHLimits(dt, region, out double minPH, out double maxPH);
        // Para simular uma variação diária mínima, usamos uma função senoidal com amplitude
        // proporcional a 10% da amplitude da faixa (sinalizando pequenas variações ao longo do dia).
        double hour = dt.Hour + dt.Minute / 60.0;
        double angle = ((hour / 24.0) * 2 * Math.PI) - Math.PI / 2;
        double sineValue = Math.Sin(angle);
        double range = maxPH - minPH;
        double modulation = 0.1 * range * sineValue; // modulação suave
        // Calcula a média da faixa e adiciona a modulação
        double basePH = (minPH + maxPH) / 2.0 + modulation;
        
        // Adiciona um leve ruído aleatório (±0.01)
        double noise = (random.NextDouble() - 0.5) * 0.02;
        double ph = basePH + noise;
        
        return Math.Round(ph, 3);
    }

    static void Main(string[] args)
    {
        // Primeiro, cria um dicionário que mapeia cada cidade à sua região.
        // Isso facilita saber, para uma cidade escolhida aleatoriamente, a qual região ela pertence.
        Dictionary<string, string> cityToRegion = new Dictionary<string, string>();
        foreach (var kv in regionCities)
        {
            string region = kv.Key;
            foreach (string city in kv.Value)
            {
                cityToRegion[city] = region;
            }
        }

        // Cria uma lista contendo todas as cidades disponíveis
        List<string> citiesList = new List<string>(cityToRegion.Keys);


        // Caminho para o CSV de saída
        string csvPath = "ph_simulado_ano.csv";
        using (StreamWriter sw = new StreamWriter(csvPath))
        {
            // Cabeçalho do CSV
            sw.WriteLine("DataHora,Regiao,Cidade,PH");
            
            
            DateTime start = new DateTime(2025, 1, 1, 0, 0, 0);
            DateTime end = start.AddDays(1);
            DateTime current = start;
            
            while (current < end)
            {
                // Seleciona aleatoriamente uma cidade
                string city = citiesList[random.Next(citiesList.Count)];
                // Obtém a região correspondente usando o dicionário cityToRegion
                string region = cityToRegion[city];
                
                // Calcula o pH para o instante e região atuais
                double ph = SmoothRandomPH(current, region);
                
                // Cria a linha no formato "YYYY-MM-DD HH:mm:ss,Regiao,Cidade,PH"
                string line = $"{current.ToString("yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture)},{region},{city},{ph}";
                sw.WriteLine(line);
                
                // Avança uma hora
                current = current.AddHours(1);
            }
        }
        Console.WriteLine("CSV gerado com sucesso: " + csvPath);
    }
}
